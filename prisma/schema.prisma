// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  @@map(name: "users")
  id Int @default(autoincrement()) @id
  firstName String? @db.VarChar(255)
  lastName String? @db.VarChar(255)
  middleName String? @db.VarChar(255)
  email String? @db.VarChar(255) @unique
  password String? @db.VarChar(255)
  msisdn String @db.VarChar(50) @unique
  status UserStatus @default(ACTIVE)
  language Language @default(UZ)
  refreshToken String?
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  addresses UserAddresses[]
  role RoleUsers[]
}

model UserAddresses {
  @@map(name: "userAddresses")
  id Int @default(autoincrement()) @id
  userId Int
  latitude String @db.VarChar(255)
  longitude String @db.VarChar(255)
  name String? @db.VarChar(255)
  street String? @db.VarChar(255)
  city String? @db.VarChar(255)
  home String? @db.VarChar(255)
  apartment String? @db.VarChar(255)
  comment String @db.VarChar(1000)
  domofon String? @db.VarChar(255)
  address String? @db.VarChar(255)
  regionId String
  districtId String
  createdAt DateTime @default(now())
  updatedAt DateTime?
  userAddress User @relation(fields: [userId], references: [id])
  // userRegion Regions @relation(fields: [regionId], references: [id])
  // userDistrict Districts @relation(fields: [districtId], references: [id])
}

// model Regions {
//   @@map(name: "regions")
//   id Int @default(autoincrement()) @id
//   name String @db.VarChar(255)
//   createdAt DateTime @default(now())
//   addresses UserAddresses[]
// }

// model Districts {
//   @@map(name: "districts")
//   id Int @default(autoincrement()) @id
//   name String @db.VarChar(255)
//   createdAt DateTime @default(now())
//   addresses UserAddresses[]
// }

model Roles {
  @@map(name: "roles")
  id Int @default(autoincrement()) @id
  name RolesEnum
  roleUser RoleUsers[]
}

model RoleUsers {
  @@map(name: "roleUsers")
  id Int @default(autoincrement()) @id
  userId Int @unique
  roleId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Roles @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model VerifyCodes {
  @@map("verifyCodes")
  id Int @default(autoincrement()) @id
  msisdn String @db.VarChar(50) @unique
  email String? @db.VarChar(255) @unique
  code String
  status OtpStatus @default(UNCONFIRMED)
  reason OtpReason @default(LOGIN)
  ip String?
  expiredAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime?
  attempts Int @db.SmallInt @default(0)
}

enum OtpReason {
  FORGETPASSWORD
  LOGIN
}

enum OtpStatus {
  UNCONFIRMED
  CONFIRMED
}

enum RolesEnum {
   CLIENT
   MERCHANT
   ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCK
  INACTIVE
}

enum Language {
  UZ
  RU
  ENG
}